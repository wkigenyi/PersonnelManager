/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systems.tech247.pdreditors;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import javax.persistence.EntityManager;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import systems.tech247.dbaccess.DataAccess;
import systems.tech247.hr.CompanyDetails;
import systems.tech247.pdr.UtilityPDR;

/**
 *
 * @author Admin
 */
public class PDRWorkHoursEditorPanel extends javax.swing.JPanel implements LookupListener{

    CompanyDetails emp;
    DataAccess da = new DataAccess();
    Boolean edit =false;
    
    //Updatables
    String daysPerMonth = null;
    String hoursPerMonth = null;
    String hoursPerDay = null;
    String physicalAddress = null;
    String dbName = null;
    String identity;
    String tel2 = null;
    String tel3 = null;
    String email = null;
    String web = null;
    String fax = null;
    byte[] logo = null;
    String companyName = null;
    
    TopComponent companyTc = WindowManager.getDefault().findTopComponent("CompanyTopComponent");
    Lookup.Result<CompanyDetails> empRslt = companyTc.getLookup().lookupResult(CompanyDetails.class);
    
    /**
     * Creates new form PersonalInfoPanel
     */
    public PDRWorkHoursEditorPanel() {
        initComponents();
        //Start transaction
        
        
        empRslt.addLookupListener(this);
        resultChanged(new LookupEvent(empRslt));
        
        
        
        jtIdentity.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                identity = jtIdentity.getText();
                modify();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                identity = jtIdentity.getText();
                modify();
            }

            @Override
            public void keyReleased(KeyEvent e) {
                identity = jtIdentity.getText();
                modify();
            }
        });
        
        
        
        
        
        
        
        jtHoursPermonth.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                hoursPerMonth = jtHoursPermonth.getText();
                modify();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                hoursPerMonth = jtHoursPermonth.getText();
                modify();
                
            }

            @Override
            public void keyReleased(KeyEvent e) {
                hoursPerMonth = jtHoursPermonth.getText();
                modify();
            }
        });
        
               
        
        
        
        
        
        
        
       
        jtHoursPerDay.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
                hoursPerDay = jtHoursPerDay.getText();
                modify();
            }

            @Override
            public void keyPressed(KeyEvent e) {
                hoursPerDay = jtHoursPerDay.getText();
                modify();
            }

            @Override
            public void keyReleased(KeyEvent e) {
                hoursPerDay = jtHoursPerDay.getText();
                modify();
            }
        });
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtIdentity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jtDatabase = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jcbNGO = new javax.swing.JCheckBox();
        jcbDefault = new javax.swing.JCheckBox();
        jtDaysPermonth = new javax.swing.JFormattedTextField();
        jtHoursPermonth = new javax.swing.JFormattedTextField();
        jtHoursPerDay = new javax.swing.JFormattedTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jLabel3.text")); // NOI18N

        jtIdentity.setText(org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jtIdentity.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jLabel12.text")); // NOI18N

        jtDatabase.setText(org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jtDatabase.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jLabel9.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jcbNGO, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jcbNGO.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jcbDefault, org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jcbDefault.text")); // NOI18N

        jtDaysPermonth.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        jtDaysPermonth.setText(org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jtDaysPermonth.text")); // NOI18N

        jtHoursPermonth.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jtHoursPermonth.setText(org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jtHoursPermonth.text")); // NOI18N

        jtHoursPerDay.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        jtHoursPerDay.setText(org.openide.util.NbBundle.getMessage(PDRWorkHoursEditorPanel.class, "PDRWorkHoursEditorPanel.jtHoursPerDay.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtIdentity)
                            .addComponent(jtDatabase)
                            .addComponent(jtDaysPermonth)
                            .addComponent(jtHoursPermonth)
                            .addComponent(jtHoursPerDay, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcbNGO)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbDefault)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNGO)
                    .addComponent(jcbDefault))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jtDaysPermonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtHoursPermonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jtIdentity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jtDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jtHoursPerDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 196, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox jcbDefault;
    private javax.swing.JCheckBox jcbNGO;
    private javax.swing.JTextField jtDatabase;
    private javax.swing.JFormattedTextField jtDaysPermonth;
    private javax.swing.JFormattedTextField jtHoursPerDay;
    private javax.swing.JFormattedTextField jtHoursPermonth;
    private javax.swing.JTextField jtIdentity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result<CompanyDetails> result = (Lookup.Result<CompanyDetails>)le.getSource();
        for (CompanyDetails e: result.allInstances()){
            
                
                
                
                emp = (CompanyDetails)e;
                try{
                jtDaysPermonth.setText(emp.getWorkingDaysPerMonth()+"" );
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                try{
                jtHoursPermonth.setText(emp.getHoursPerMonth()+"");
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                try{
                
                
                jtHoursPerDay.setText(emp.getHoursPerDay()+"");
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                
                try{
                
                
                jtDatabase.setText(emp.getDbaseName());
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                try{
                jtIdentity.setText(emp.getIdentityID());
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                
                try{
                
                
                jcbDefault.setSelected(emp.getIsDefaultCompany());
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                try{
                jcbNGO.setSelected(emp.getIsNGO());
                }catch(NullPointerException ex){
                    // When some info is missing
                }
                
                
                
                
            }
            
            
            
           
            
           
            
            
            
        
    }
    
    void modify(){
        
            if(getLookup().lookup(MySavable.class)==null){
                UtilityPDR.editorIC.add(new MySavable());
            }
        
    }

    
    public Lookup getLookup() {
        TopComponent tc = WindowManager.getDefault().findTopComponent("EmployeeEditorTopComponent");
        return tc.getLookup();
    }
    
    private class MySavable extends AbstractSavable{

        public MySavable(){
            register();
        } 
        
        @Override
        protected String findDisplayName() {
            return "Company Info";
        }

        @Override
        protected void handleSave() throws IOException {
            EntityManager entityManager = DataAccess.getEntityManager();
            //If it is an update
            if(emp != null ){
            UtilityPDR.editorIC.remove(this);
            unregister();
            entityManager.getTransaction().begin();
            CompanyDetails e = entityManager.find(CompanyDetails.class, emp.getCompanyID());
            if(null != identity){
            e.setIdentityID(identity);
            }
            
            if(hoursPerDay != null){
                Double h = new Double(hoursPerDay);
                e.setHoursPerDay(h);
            }
            
            if(hoursPerMonth != null){
                Double h = new Double(hoursPerMonth);
                e.setHoursPerMonth(h);
            }
            
            if(daysPerMonth != null){
                int d = new Integer(daysPerMonth);
                e.setWorkingDaysPerMonth(d);
            }
            
            if(dbName != null){
                e.setDbaseName(dbName);
            }
            
            
            
            
            
            
            
            
            
            entityManager.getTransaction().commit();
            }else{
                
            }
            
        }
        
        PDRWorkHoursEditorPanel pnel(){
            return PDRWorkHoursEditorPanel.this;
        }

        @Override
        public boolean equals(Object o) {
            if(o instanceof MySavable){
                MySavable m = (MySavable)o;
                return pnel() == m.pnel();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return pnel().hashCode();
        }
        
    }
    
    
}
